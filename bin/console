#!/usr/bin/env php
<?php
/*
*MIT License
*
*Copyright (c) 2018 Christophe Brachet
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in all
*copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*SOFTWARE.
*
*/
if (@!include __DIR__ . '/../vendor/autoload.php') {
    die('Install packages using `composer install`');
}
use Pimple\Container;
use Symfony\Component\Console\Application;
use \Aspi\Framework\Command\WebServerCommand;
use \Aspi\Framework\Command\PublishWebSiteCommand;
use \Aspi\Framework\Provider\ConfigurationServiceProvider;
use \Aspi\Framework\Provider\DoctrineServiceProvider;
use \Aspi\Framework\Provider\ServerServiceProvider;
use \Aspi\Framework\Provider\SerializerServiceProvider;
use \Aspi\Framework\Provider\FileServiceProvider;

error_reporting(E_ALL);
ini_set('display_errors', 1);
if (PHP_SAPI == 'cli-server') {
    // To help the built-in PHP dev server, check if the request was actually for
    // something which should probably be served as a static file
    $url  = parse_url($_SERVER['REQUEST_URI']);
    $file = __DIR__ . $url['path'];
    if (is_file($file)) {
        return false;
    }
}
$container = new Container(array());
$container->register(new FileServiceProvider());
$container->register(new SerializerServiceProvider());
$container->register(new DoctrineServiceProvider()); 
$container->register(new ConfigurationServiceProvider());
$container->register(new ServerServiceProvider());



//create console application
$console = new Application();
$console->add(new WebServerCommand($container));
$console->add(new PublishWebSiteCommand($container));
$console->run();

